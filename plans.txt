27 JUN 2025
11:50 am -12:14 pm 
1. Read the csv line by line : populate a vector -> each attribute (column) has a place -- for each possible value of that attribute it has a place -- then pos neg place 
2. lets say i have to calculate the entropy of a certain value in column 2. i will go into the vector's 2 index, go into that values index and find out pos-neg. will take proportion using the pos-neg --done 
3. lets say i have now all the values entropy. now to calculate IG of that attribute, go to index 2 of the vec, find total pos-neg there, and for each value of that col find the pos-neg there , then find the proportion and previously calculated entropy to find IG 
4. thought: maybe some class would help that stores the number of pos-neg at each part maybe
5. wheen i split i should have some kind of node class maybe that should help, and thats connected to number 4 somehow   


30 JUN 2025 
1. 7:15 pm - 8:03 pm - time waste thinking there's bug, but actually no bug in counting, it was just train split so less number of nodes 
2. 8:04 pm - 10:48 pm - main loop done 

1 JULY 2025
1. 1:03 am - 3:00 am - queue added,print added 
2. 3:22 pm - 5:47 pm - iris done without depth
3. 5:50 pm - 7:49 pm - finding out whats wrong 

2 JULY 2025
1. 7:55 pm - 8:50 - iris done full 
2. 8:55 pm - 10:23 pm - adult.data preprocess done 
3. 10:23 pm - 10:30 pm - some 

3 JULY 2025 
1. 10:32 am - 5:41 pm - done 


 #include <iostream>
using namespace std;
#include <string>
#include <vector>
#include <unordered_map>
class Preprocessor
{
public:
    void preprocess(vector<vector<string>> &v)
    {
        int rowSize = v.size();
        int colSize = v[0].size();
        cout << "[Preprocessor] Starting preprocessing: " << rowSize << " rows, " << colSize << " columns." << endl;
        for (int i = 0; i < colSize; i++)
        {
            unordered_map<string, int> targetColMap;
            int uniqueTargets = 0;
            for (int j = 0; j < rowSize; j++)
            {
                if (v[j].size() != colSize)
                {
                    cout << "[Preprocessor] Skipping row " << j << " due to column mismatch: has " << v[j].size() << ", expected " << colSize << ". Row: ";
                    for (size_t k = 0; k < v[j].size(); ++k)
                    {
                        cout << '"' << v[j][k] << '"';
                        if (k != v[j].size() - 1)
                            cout << ", ";
                    }
                    cout << endl;
                    continue;
                }
                std::string val = v[j][i];
                // Trim leading/trailing spaces
                size_t start = val.find_first_not_of(" \t\n\r");
                size_t end = val.find_last_not_of(" \t\n\r");
                if (start == std::string::npos)
                    val = "";
                else
                    val = val.substr(start, end - start + 1);
                if (val.empty() || val == "?" || val == "-")
                {
                    v[j][i] = "-1";
                    continue;
                }
                if (targetColMap.find(val) == targetColMap.end())
                {
                    targetColMap[val] = uniqueTargets++;
                }
                v[j][i] = to_string(targetColMap[val]);
                if (j % 1000 == 0)
                {
                    cout << "[Preprocessor] Encoded row " << j << " col " << i << ": " << v[j][i] << endl;
                }
            }
            cout << "[Preprocessor] Finished column " << i << ", unique values: " << uniqueTargets << endl;
        }
        cout << "[Preprocessor] Done preprocessing." << endl;
    }
};